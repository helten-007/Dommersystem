// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace NordicArenaTournament.Areas.Admin.Controllers
{
    public partial class TournamentAdminController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected TournamentAdminController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AdminIndex()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AdminIndex);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ContestantList()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ContestantList);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult DeleteContestant()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteContestant);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult RemoveContestant()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RemoveContestant);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult JudgeList()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.JudgeList);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult DeleteJudge()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteJudge);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult EditTournament()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditTournament);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult SaveTournament()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SaveTournament);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult StartTournament()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.StartTournament);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult EditTournamentRound()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditTournamentRound);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Results()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Results);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ResetRound()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ResetRound);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public TournamentAdminController Actions { get { return MVC.Admin.TournamentAdmin; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "Admin";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "TournamentAdmin";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "TournamentAdmin";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string AdminIndex = "AdminIndex";
            public readonly string ContestantList = "ContestantList";
            public readonly string DeleteContestant = "DeleteContestant";
            public readonly string RemoveContestant = "RemoveContestant";
            public readonly string JudgeList = "JudgeList";
            public readonly string DeleteJudge = "DeleteJudge";
            public readonly string EditTournament = "EditTournament";
            public readonly string SaveTournament = "SaveTournament";
            public readonly string StartTournament = "StartTournament";
            public readonly string EditTournamentRound = "EditTournamentRound";
            public readonly string Results = "Results";
            public readonly string ResetRound = "ResetRound";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string AdminIndex = "AdminIndex";
            public const string ContestantList = "ContestantList";
            public const string DeleteContestant = "DeleteContestant";
            public const string RemoveContestant = "RemoveContestant";
            public const string JudgeList = "JudgeList";
            public const string DeleteJudge = "DeleteJudge";
            public const string EditTournament = "EditTournament";
            public const string SaveTournament = "SaveTournament";
            public const string StartTournament = "StartTournament";
            public const string EditTournamentRound = "EditTournamentRound";
            public const string Results = "Results";
            public const string ResetRound = "ResetRound";
        }


        static readonly ActionParamsClass_AdminIndex s_params_AdminIndex = new ActionParamsClass_AdminIndex();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AdminIndex AdminIndexParams { get { return s_params_AdminIndex; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AdminIndex
        {
            public readonly string tournamentId = "tournamentId";
        }
        static readonly ActionParamsClass_ContestantList s_params_ContestantList = new ActionParamsClass_ContestantList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ContestantList ContestantListParams { get { return s_params_ContestantList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ContestantList
        {
            public readonly string tournamentId = "tournamentId";
            public readonly string contestantId = "contestantId";
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_DeleteContestant s_params_DeleteContestant = new ActionParamsClass_DeleteContestant();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteContestant DeleteContestantParams { get { return s_params_DeleteContestant; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteContestant
        {
            public readonly string tournamentId = "tournamentId";
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_RemoveContestant s_params_RemoveContestant = new ActionParamsClass_RemoveContestant();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_RemoveContestant RemoveContestantParams { get { return s_params_RemoveContestant; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_RemoveContestant
        {
            public readonly string tournamentId = "tournamentId";
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_JudgeList s_params_JudgeList = new ActionParamsClass_JudgeList();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_JudgeList JudgeListParams { get { return s_params_JudgeList; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_JudgeList
        {
            public readonly string tournamentId = "tournamentId";
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_DeleteJudge s_params_DeleteJudge = new ActionParamsClass_DeleteJudge();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_DeleteJudge DeleteJudgeParams { get { return s_params_DeleteJudge; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_DeleteJudge
        {
            public readonly string tournamentId = "tournamentId";
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_EditTournament s_params_EditTournament = new ActionParamsClass_EditTournament();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditTournament EditTournamentParams { get { return s_params_EditTournament; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditTournament
        {
            public readonly string tournamentId = "tournamentId";
        }
        static readonly ActionParamsClass_SaveTournament s_params_SaveTournament = new ActionParamsClass_SaveTournament();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SaveTournament SaveTournamentParams { get { return s_params_SaveTournament; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SaveTournament
        {
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_StartTournament s_params_StartTournament = new ActionParamsClass_StartTournament();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_StartTournament StartTournamentParams { get { return s_params_StartTournament; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_StartTournament
        {
            public readonly string model = "model";
        }
        static readonly ActionParamsClass_EditTournamentRound s_params_EditTournamentRound = new ActionParamsClass_EditTournamentRound();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditTournamentRound EditTournamentRoundParams { get { return s_params_EditTournamentRound; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditTournamentRound
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_Results s_params_Results = new ActionParamsClass_Results();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Results ResultsParams { get { return s_params_Results; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Results
        {
            public readonly string tournamentId = "tournamentId";
            public readonly string roundNo = "roundNo";
        }
        static readonly ActionParamsClass_ResetRound s_params_ResetRound = new ActionParamsClass_ResetRound();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ResetRound ResetRoundParams { get { return s_params_ResetRound; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ResetRound
        {
            public readonly string tournamentId = "tournamentId";
            public readonly string roundNo = "roundNo";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string ContestantList = "ContestantList";
                public readonly string EditTournament = "EditTournament";
                public readonly string EditTournamentJudgingCriterion = "EditTournamentJudgingCriterion";
                public readonly string EditTournamentRound = "EditTournamentRound";
                public readonly string JudgeList = "JudgeList";
                public readonly string Results = "Results";
            }
            public readonly string ContestantList = "~/Areas/Admin/Views/TournamentAdmin/ContestantList.cshtml";
            public readonly string EditTournament = "~/Areas/Admin/Views/TournamentAdmin/EditTournament.cshtml";
            public readonly string EditTournamentJudgingCriterion = "~/Areas/Admin/Views/TournamentAdmin/EditTournamentJudgingCriterion.cshtml";
            public readonly string EditTournamentRound = "~/Areas/Admin/Views/TournamentAdmin/EditTournamentRound.cshtml";
            public readonly string JudgeList = "~/Areas/Admin/Views/TournamentAdmin/JudgeList.cshtml";
            public readonly string Results = "~/Areas/Admin/Views/TournamentAdmin/Results.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_TournamentAdminController : NordicArenaTournament.Areas.Admin.Controllers.TournamentAdminController
    {
        public T4MVC_TournamentAdminController() : base(Dummy.Instance) { }

        [NonAction]
        partial void AdminIndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long tournamentId);

        [NonAction]
        public override System.Web.Mvc.ActionResult AdminIndex(long tournamentId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AdminIndex);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "tournamentId", tournamentId);
            AdminIndexOverride(callInfo, tournamentId);
            return callInfo;
        }

        [NonAction]
        partial void ContestantListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long tournamentId, long? contestantId);

        [NonAction]
        public override System.Web.Mvc.ActionResult ContestantList(long tournamentId, long? contestantId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ContestantList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "tournamentId", tournamentId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "contestantId", contestantId);
            ContestantListOverride(callInfo, tournamentId, contestantId);
            return callInfo;
        }

        [NonAction]
        partial void ContestantListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long tournamentId, NordicArenaTournament.Areas.Admin.ViewModels.ContestantListAndCreate model);

        [NonAction]
        public override System.Web.Mvc.ActionResult ContestantList(long tournamentId, NordicArenaTournament.Areas.Admin.ViewModels.ContestantListAndCreate model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ContestantList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "tournamentId", tournamentId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            ContestantListOverride(callInfo, tournamentId, model);
            return callInfo;
        }

        [NonAction]
        partial void DeleteContestantOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long tournamentId, long? id);

        [NonAction]
        public override System.Web.Mvc.ActionResult DeleteContestant(long tournamentId, long? id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteContestant);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "tournamentId", tournamentId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            DeleteContestantOverride(callInfo, tournamentId, id);
            return callInfo;
        }

        [NonAction]
        partial void RemoveContestantOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long tournamentId, long? id);

        [NonAction]
        public override System.Web.Mvc.ActionResult RemoveContestant(long tournamentId, long? id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RemoveContestant);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "tournamentId", tournamentId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            RemoveContestantOverride(callInfo, tournamentId, id);
            return callInfo;
        }

        [NonAction]
        partial void JudgeListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long tournamentId);

        [NonAction]
        public override System.Web.Mvc.ActionResult JudgeList(long tournamentId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.JudgeList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "tournamentId", tournamentId);
            JudgeListOverride(callInfo, tournamentId);
            return callInfo;
        }

        [NonAction]
        partial void JudgeListOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long tournamentId, NordicArenaTournament.Areas.Admin.ViewModels.JudgeListAndCreate model);

        [NonAction]
        public override System.Web.Mvc.ActionResult JudgeList(long tournamentId, NordicArenaTournament.Areas.Admin.ViewModels.JudgeListAndCreate model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.JudgeList);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "tournamentId", tournamentId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            JudgeListOverride(callInfo, tournamentId, model);
            return callInfo;
        }

        [NonAction]
        partial void DeleteJudgeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long tournamentId, long id);

        [NonAction]
        public override System.Web.Mvc.ActionResult DeleteJudge(long tournamentId, long id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.DeleteJudge);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "tournamentId", tournamentId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            DeleteJudgeOverride(callInfo, tournamentId, id);
            return callInfo;
        }

        [NonAction]
        partial void EditTournamentOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long tournamentId);

        [NonAction]
        public override System.Web.Mvc.ActionResult EditTournament(long tournamentId)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditTournament);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "tournamentId", tournamentId);
            EditTournamentOverride(callInfo, tournamentId);
            return callInfo;
        }

        [NonAction]
        partial void SaveTournamentOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, NordicArenaTournament.Areas.Admin.ViewModels.EditTournamentViewModel model);

        [NonAction]
        public override System.Web.Mvc.ActionResult SaveTournament(NordicArenaTournament.Areas.Admin.ViewModels.EditTournamentViewModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SaveTournament);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            SaveTournamentOverride(callInfo, model);
            return callInfo;
        }

        [NonAction]
        partial void StartTournamentOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, NordicArenaTournament.Areas.Admin.ViewModels.EditTournamentViewModel model);

        [NonAction]
        public override System.Web.Mvc.ActionResult StartTournament(NordicArenaTournament.Areas.Admin.ViewModels.EditTournamentViewModel model)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.StartTournament);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            StartTournamentOverride(callInfo, model);
            return callInfo;
        }

        [NonAction]
        partial void EditTournamentRoundOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int id);

        [NonAction]
        public override System.Web.Mvc.ActionResult EditTournamentRound(int id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditTournamentRound);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            EditTournamentRoundOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void ResultsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long tournamentId, int roundNo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Results(long tournamentId, int roundNo)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Results);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "tournamentId", tournamentId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "roundNo", roundNo);
            ResultsOverride(callInfo, tournamentId, roundNo);
            return callInfo;
        }

        [NonAction]
        partial void ResetRoundOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, long tournamentId, int roundNo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ResetRound(long tournamentId, int roundNo)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ResetRound);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "tournamentId", tournamentId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "roundNo", roundNo);
            ResetRoundOverride(callInfo, tournamentId, roundNo);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591
