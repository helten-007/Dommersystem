@model NordicArenaTournament.Areas.Speaker.ViewModels.SpeakerViewModel

@using System.Web.Mvc.Html
@using NordicArenaDomainModels.Models
@using NordicArenaDomainModels.Resources
@using NordicArenaTournament.Common
@using NordicArenaTournament.Areas.Speaker.Controllers

@{
	ViewBag.Title = NaHtml.PageTitle(Text.SpeakerPageTitle);
}

<div class="container">
	<div class="row">
		<div class="10u">
			<div class="row">

				@if (Model.CurrentContestants != null && Model.CurrentContestants.Count > 0)
				{
					var borderClass = "border-right";
					for (int i = 0; i < Model.CurrentContestants.Count; i++)
					{
						<div class="6u current-rider-container @if(i == 0){@borderClass}">
							<div class="current-rider">
								@{var rider = (i + 1);}
								<h2>Rider: @rider</h2>
								<h1>@Model.CurrentContestants[i].Name</h1>
								<h1>@Model.CurrentContestants[i].Stance | 25<!--Model.CurrentContestants[i].AgeYears--> | @Model.CurrentContestants[i].Location</h1>
								<p>
									SPONSORER: @Model.CurrentContestants[i].Sponsors<br><br>
								</p>
								<div class="button-container">
									BEST SCORE: <button>7.91</button>
								</div>
							</div>
						</div>
					}
				}

				<div id="next-contestants" class="12u">
					<div class="row">
						@if (Model.CurrentHeatNo < Model.Heats.Count)
						{
							foreach (var cont in Model.Heats[Model.CurrentHeatNo].Contestants)
							{
								<div class="6u">
									<div class="current-rider">
										<h1>@cont.Name</h1>
										<h1>@cont.Contestant.Stance | 25 ÅR | @cont.Contestant.Location</h1>
										<p>
											SPONSORER: @cont.Contestant.Sponsors<br><br>
										</p>
										<div class="button-container">
											BEST SCORE: <button>7.91</button>
										</div>
									</div>
								</div>
							}
						}
						else
						{
							<div class="12u no-contestants">
								<div class="current-rider">
									<h1>Ingen flere deltakere.</h1>
								</div>
							</div>
						}
						<div id="upcoming-contestants" class="12u">
							<div class="divider"></div>

							@{var contIndex = 0;}
							<ul>
								@for (var i = Model.CurrentHeatNo + 1; i < Model.Heats.Count(); i++)
								{
									<li class="row">
										@foreach (var cont in Model.Heats[i].Contestants)
										{
											if (contIndex == 0)
											{
												<span class="6u align-right">
													@cont.Name
												</span>
											}
											else
											{
												<span class="6u">@cont.Name</span>
											}
											contIndex++;
										}
										@{contIndex = 0;}
									</li>
								}
							</ul>
						</div>
					</div>
				</div>

			</div>
		</div>
		<div class="2u" style="border-left: 5px solid #443F3F; height: 800px;">
			<h2>@Model.Tournament.Name - @Model.Round.Title</h2>


		</div>
	</div>
</div>











@* Administrative controls *@
<section id="speaker-controls" class="noprint">
	<div id="speaker-timer-container" class="speaker-control-container">
		<div class="header">Run @Model.CurrentRunNo / @Model.Round.RunsPerContestant </div>

		<input type="button" value="Start" onclick="nordicArena.speaker.startTimer();" @Html.DisableIf(Model.DisableStartButton) />
		<div class="speaker-timer-text"></div>
	</div>

	<div class="speaker-control-container">
		<div class="header">@Text.JudgeStatus:</div><br />
		<div id="judge-status-container">
			@{ Html.RenderPartial(MVC.Speaker.TournamentSpeaker.Views.JudgeStatus, Model.JudgeStatus);}
		</div>
	</div>
	@using (Html.BeginForm())
	{
		<div class="speaker-control-container" id="speaker-contestant-controls">
			@{ Html.RenderPartial(MVC.Speaker.TournamentSpeaker.Views.RunControlPanel, Model.RunControlModel); }
		</div>
	}
	<div class="speaker-control-container" id="speaker-round-controls">
		<div class="header">@Text.Round @Model.Round.RoundNo / @Model.RoundCount</div>
		@using (Html.BeginForm(Html.CurrentAction(), Html.CurrentController(), method: FormMethod.Get))
		{
			<button name="roundNo" type="submit" class="nav-button-grey previous-grey" value="@(Model.Round.RoundNo - 1)" @Html.DisableIf(!Model.HasPreviousRound)></button>
			<button name="roundNo" type="submit" class="nav-button-grey next-grey" value="@(Model.Round.RoundNo + 1)" @Html.DisableIf(!Model.HasNextRound)></button><br />
		}
		@using (Html.BeginForm(MVC.Speaker.TournamentSpeaker.ActionNames.EndRound, Html.CurrentController()))
		{
			<input type="hidden" id="tournamentId" name="tournamentId" value="@Model.Tournament.Id" />
			<input type="hidden" name="roundNo" value="@Model.Round.RoundNo" />
			if (Model.Round.Status == TournamentStatus.Running)
			{
				<button name="endRoundButton" type="submit" style="min-width: 142px">@Text.EndRound</button>
			}
		}
	</div>
</section>

<div class="clearfix"></div>

@* Current contestant *@
@if (Model.CurrentContestants != null && Model.CurrentContestants.Count > 0)
{
	for (int i = 0; i < Model.CurrentContestants.Count; i++)
	{
		<div class="secondary-header-bar">
			@Model.CurrentContestants[i].Name

			<div class="details">
				@Html.DisplayPairFor(p => p.CurrentContestants[i].AgeYears)
				@Html.DisplayPairFor(p => p.CurrentContestants[i].Location)
				@Html.DisplayPairFor(p => p.CurrentContestants[i].Sponsors)
				@Html.DisplayPairFor(p => p.CurrentContestants[i].Stance)
			</div>
		</div>
		<br>
	}
}


		@* List of contestants *@
		@if (@Model.DisplayContestantList)
		{
			<div id="speaker-contestants-list">
				@Html.Partial(MVC.Speaker.TournamentSpeaker.Views.NextContestantsList, Model)
			</div>
		}
		else
		{
			@* Round not started *@
			@Text.RoundNotStarted
		}

		@section Scripts {
			@Styles.Render("~/bundles/speaker-styles")
			@Scripts.Render("~/bundles/speaker-scripts")
			@Scripts.Render("~/signalr/hubs")
		}

		@section jqueryonload
{
			nordicArena.speaker.initTimer(@Model.Round.SecondsPerRun);
			nordicArena.speaker.judgeStatusReloadUrl = '@Html.Raw(Url.Action(MVC.Speaker.TournamentSpeaker.ActionNames.JudgeStatus, new { tournamentId = Model.Tournament.Id, runNo = Model.CurrentRunNo }))';
			nordicArena.speaker.runControlsReloadUrl = '@Html.Raw(Url.Action(MVC.Speaker.TournamentSpeaker.ActionNames.RunControlPanel, new { tournamentId = Model.Tournament.Id, roundNo = Model.Round.RoundNo }))';
			nordicArena.speaker.contestantListReloadUrl = '@Html.Raw(Url.Action(MVC.Speaker.TournamentSpeaker.ActionNames.NextContestantsList, new { tournamentId = Model.Tournament.Id, roundNo = Model.Round.RoundNo }))';
			nordicArena.speaker.initHub();
		}