@model NordicArenaTournament.Areas.Admin.ViewModels.ResultsViewModel
@using NordicArenaDomainModels.Resources
@using NordicArenaTournament.Common

@{
    ViewBag.Title = NaHtml.PageTitle(Text.ResultsPageTitle);
}

<div class="floatright noprint">
    @using (Html.BeginForm(Html.CurrentAction(), Html.CurrentController(), method: FormMethod.Get))
    {
        <button name="roundNo" type="submit" class="nav-button-grey previous-grey" value="@(Model.RoundNo - 1)" @Html.DisableIf(!Model.HasPreviousRound)></button>
        <button name="roundNo" type="submit" class="nav-button-grey next-grey" value="@(Model.RoundNo + 1)" @Html.DisableIf(!Model.HasNextRound)></button><br />
    }
</div>
<h1>@Html.ValueFor(model => model.TournamentName) - @Html.ValueFor(model => model.RoundTitle)</h1>
<h2>@Text.ResultsPageTitle</h2>

@if (Model.Contestants.Count > 0)
{
    <table>
        <tr>
            <th>#</th>
            <th>@PropertyNames.Contestant_Name</th>
            @for (int i = 1; i <= Model.RunCount; i++)
            {
                <th>@Text.Run @i</th>
            }
            <th>@PropertyNames.RoundContestant_TotalScore</th>
        </tr>
        @{ int position = 1;}
        @foreach (var c in Model.Contestants)
        {
            <tr>
                <td>@(position++)</td>
                <td>@c.Name</td>
                @for (int i = 0; i < Model.RunCount; i++)
                {
                    <td>@c.RunScore[i].Decimals(2)</td>
                }
                <td>@c.TotalScore.Decimals(2)</td>
            </tr>
        }
    </table>
}